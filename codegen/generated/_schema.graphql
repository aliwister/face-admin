input AddProductInput {
  id: Long
  sku: String
  upc: String
  price: BigDecimal
  image: String
  name: String
  name_ar: String
  brand: String
  brand_ar: String
  description: String
  description_ar: String
  features: String
  features_ar: String
  cost: BigDecimal
  weight: BigDecimal
  shopIds: [Long]
  browseNode: String
  browseNode_ar: String
  slug: String
  type: String
  unit: String
  availability: Int
  salePrice: BigDecimal
  quantity: BigDecimal
  ref: String
  discountInPercent: Int
  merchantId: Int
  url: String
  dial: String
}

type Address {
  id: ID
  firstName: String
  lastName: String
  line1: String
  line2: String
  city: String
  mobile: String
}

type Attribute {
  name: String
  value: String
}

"""Built-in java.math.BigDecimal"""
scalar BigDecimal

type Cart {
  id: ID!
  secureKey: String
  gift: Boolean
  giftMessage: String

  """customer: Customer,"""
  cartItems: [CartItem]
}

type CartItem {
  id: ID
  productId: Long
  quantity: Int
  image: String
  url: String
  title: String
  price: String
  salePrice: String
  slug: String
  unit: String
}

input CartItemInput {
  productId: Long
  quantity: Int
}

type Category {
  id: Int!
  title: String!
  children: [Category!]!

  """type: String!"""
  icon: String!
  slug: String!
}

type CheckoutCart {
  id: ID!
  ref: String
  name: String
  phone: String
  email: String
  secureKey: String
  carrier: String
  currency: String
  items: [LineItem]
}

input CheckoutCartInput {
  id: ID
  ref: String
  name: String
  phone: String
  email: String
  secureKey: String

  """addresses: [Address]"""
  carrier: String
  currency: String
  items: [LineItemInput]
}

type CheckoutSession {
  redirectUrl: String
  secureKey: String
}

enum Condition {
  NEW
  LIKE_NEW
  VERY_GOOD
  GOOD
  FAIR
}

type Customer {
  id: ID!
  firstname: String
  lastname: String
  email: String
  mobile: String
  totalPoints: Long
  spentPoints: Long
}

"""java.util.Date implementation"""
scalar Date

type Gallery {
  url: String!
}

type Hashtag {
  id: ID
  en: String
  ar: String
  icon: String
  position: Int
  products: ProductResponse
}

input HashtagInput {
  id: ID
  en: String
  ar: String
  icon: String
  position: Int
}

type HashtagResponse {
  items: [Hashtag!]!
  total: Int!
  hasMore: Boolean!
}

type Inventory {
  productId: Long
  title: String
  sku: String
  received: BigDecimal
  issued: BigDecimal
  quantityOnHand: BigDecimal
  image: String
}

type Item {
  image: String
  description: String
  quantity: Long
}

type ItemIssuance {
  id: ID
  shipmentId: Long
}

type LineItem {
  productId: Int
  sku: String
  image: String
  name: String
  quantity: Float
  price: Float
  cost: Float
  subTotal: Float
  url: String
}

input LineItemInput {
  productId: Int
  sku: String
  image: String
  name: String
  quantity: Float
  price: Float
  cost: Float
  subTotal: Float
  url: String
}

scalar LocalDate

scalar LocalDateTime

"""Long type"""
scalar Long

type Merchant {
  id: ID
  name: String
}

type MerchantProduct {
  id: ID
  sku: String
  upc: String
  ref: String
  slug: String
  price: BigDecimal
  image: String
  name: String
  name_ar: String
  brand: String
  brand_ar: String
  description: String
  description_ar: String
  features: String
  features_ar: String
  cost: BigDecimal
  weight: BigDecimal
  type: String
  unit: String
  availability: Int
  salePrice: BigDecimal
  quantity: BigDecimal
  discountInPercent: Int
  shopIds: [Long]
  gallery: [String]
  browseNode: String
  browseNode_ar: String
}

type MerchantProductResponse {
  items: [MerchantProduct]
  total: Int!
  hasMore: Boolean!
}

type MerchantStock {
  quantity: BigDecimal
  availability: Int
  allow_backorder: Boolean
  link: String
  location: String
  price: BigDecimal
}

type Message {
  value: String
}

type Meta {
  publisher: String!
  isbn: String!
  edition: String!
  country: String!
  languages: [String!]!
  numberOfReader: String!
  numberOfPage: String!
  samplePDF: String!
}

type Mutation {
  """
  acceptItem(shipmentId: Long,  pkgId: Long,  purchaseItemId: Long,  productId:
  Long,  merchantId: Long,  description: String,  quantity: BigDecimal, 
  accepted: BigDecimal,  rejected: BigDecimal): Message
  """
  acceptItem(shipmentItemId: Long, packageId: Long, accepted: BigDecimal, rejected: BigDecimal): Message
  acceptPackage(pkg: PackageInput): Pkg
  acceptShipment(trackingNum: String, payment: PaymentInput, invoiceLink: String): Shipment
  addI18n(id: Int, i18n: ProductI18nInput): ProductI18n
  addItem(shipmentId: Long, productId: Long, purchaseItemId: Long, description: String, quantity: BigDecimal): Message
  addPayment(id: ID, amount: BigDecimal, method: String, authCode: String): Payment
  addToElastic(id: Long, sku: String, name: String, name_ar: String, shops: [String]): Message
  addToPricingQ(sku: String): Message
  addTrackingEvent(trackingNums: [String], shipmentStatus: ShipmentStatus, trackingEvent: Int, eventDate: LocalDateTime, details: String): Message
  approveProduct(id: ID): Product
  cancelOrder(id: ID, reason: String): Order
  cancelPurchase(id: ID, reason: String): Purchase
  closeOrder(id: ID, reason: String): Order
  closePurchase(id: ID, reason: String): Purchase
  completePricingRequest(id: Long): Message
  completePricingRequestAndEmail(id: Long): Message
  contact(id: Int): Message
  createCart(cart: CheckoutCartInput): CheckoutCart
  createCheckoutSession(secureKey: String, items: [CartItemInput]): CheckoutSession
  createHashtag(hashtag: HashtagInput): Message
  createMerchantProduct(product: AddProductInput): Message
  createNewProduct(product: ProductInput): Product
  createOrder(id: Int): Order
  createOverride(sku: String, type: OverrideType, override: String, active: Boolean, lazy: Boolean, merchantId: Int, submitOnly: Int, dial: String): Product
  createProduct(product: AddProductInput, isSaveES: Boolean, currentMerchantId: Long): MerchantProduct

  """createOrderFromCart(cart: CartInput): Order"""
  createPurchase(dto: PurchaseInput): Purchase

  """
  processAmazonShipments: Message
  printCode(shipmentId: Long): Message
  savePackage(pkgId: Long, shipmentItems: [Long]): Pkg
  scheduleShipment(id: Long, deliveryDate: LocalDate, comments: String, assignTo: String): Message
  unAccept(shipmentAcceptanceId: Long): Message
  unIssue(itemIssuanceId: Long) : Message
  """
  createShipment(shipment: ShipmentInput, shipmentItems: [ShipmentItemInput], trackingNums: [String] = []): Shipment
  discountOrder(id: ID): Order
  editOrder(id: ID, orderItems: [OrderItemInput], reason: String): Order
  getAdminFile(filename: String, contentType: String): PresignedUrl
  getAdminImageUploadUrl(filename: String, merchant: String, contentType: String): PresignedUrl
  getImageUploadUrl(filename: String, contentType: String): PresignedUrl
  getUploadUrl(filename: String, contentType: String): PresignedUrl
  importProducts(products: [AddProductInput], shopIds: [Long], browseNode: String): Message
  indexProduct(id: Int): Attribute
  issueItem(orderItemId: Long, productId: Long, description: String, quantity: BigDecimal): ItemIssuance
  pasLookup(sku: String): Product
  prepItem(dto: PackagingContentInput): Message

  """cancelOrder(id: ID): Order"""
  refundPayment(id: ID, amount: BigDecimal, authCode: String, bankName: String, bankAccountNumber: String, bankOwnerName: String, ref: Long, paymentMethod: String): Payment
  removeItem(shipmentItemId: Long): Message
  resetPassword(email: String): String
  saveShipment(shipment: ShipmentInput): Shipment
  sendOrderLevelEmail(id: ID, template: String): Message
  sendPaymentSms(id: ID, mobile: String): Message
  sendProductLevelEmail(orderId: ID, orderItems: [Long], template: String): Message
  sendToDetrack(shipmentId: Long, orderId: Long, name: String, instructions: String, date: String, time: String, assignTo: String): Message
  setAccountingCode(paymentIds: [Long], code: String): Message
  setCart(secureKey: String, items: [CartItemInput]): Cart
  setDial(dial: String, ref: Long): Message
  setHashtags(hashtags: [String], ref: Long): Message
  setOrderState(id: ID, state: OrderState): Order
  setProcessedDate(paymentIds: [Long], date: Date): Message
  setPurchaseState(id: ID, state: OrderState): Purchase
  setSettlementDate(paymentIds: [Long], date: Date): Message
  setShipmentStatus(id: Long, status: ShipmentStatus): Message
  unpackItem(shipmentItemId: Long): Message
  updateCart(secureKey: String, items: [CartItemInput]): Cart
  updateFromDetrack(id: String): Message
  updatePurchase(dto: PurchaseInput, items: [PurchaseItemInput]): Purchase
}

type Order {
  id: ID!
  reference: String
  orderState: OrderState
  invoiceDate: LocalDate
  deliveryDate: LocalDate
  customer: Customer!
  cartId: Long
  currency: String
  deliveryAddress: Address!
  invoiceAddress: Address!
  orderItems: [OrderItem]
  total: BigDecimal
  deliveryTotal: BigDecimal
  discountsTotal: BigDecimal
  subtotal: BigDecimal
  carrier: String
  paymentMethod: String
  createdDate: Date
  payments: [Payment]
  balance: BigDecimal
}

type OrderItem {
  id: ID
  orderId: Long
  sequence: Int
  productName: String
  quantity: Int
  price: BigDecimal
  comment: String
  image: String
  weight: BigDecimal
  unit: String
  lineTotal: BigDecimal
  productUrl: String
  productSku: String
  productId: Long
  po: Long
}

input OrderItemInput {
  id: ID
  orderId: Long
  sequence: Int
  quantity: Int
  price: BigDecimal
}

type OrderResponse {
  items: [Order!]!
  total: Int!
  hasMore: Boolean!
}

enum OrderState {
  AWAITING_PAYMENT
  DRAFT
  CONTACTED
  PAYMENT_AUTHORIZED
  PAYMENT_ACCEPTED
  IN_PROGRESS
  READY
  PARTIALLY_DELIVERED
  DELIVERED
  SHIPPED
  CANCELLED
  CLOSED
}

type OutstandingQueue {
  id: ID
  description: String
  quantity: BigDecimal
  allocated: BigDecimal
  price: BigDecimal
  weight: BigDecimal
  image: String
  sku: String
  orderId: Long
  orderItemId: Long
  productId: Long
  wait: Int
}

enum OverrideType {
  COST
  WEIGHT
  SHIPPING
  AVAILABILITY
  CONDITION
  PRICE
}

input PackageInput {
  length: BigDecimal
  width: BigDecimal
  height: BigDecimal
  weight: BigDecimal
  packageType: PackageType
  shipmentId: Long
}

enum PackageType {
  BADALS14X18BAG
  DHLFLYER
  DHLFLYERBIG
  BOX
  TUBE
  NONSTANDARD
}

input PackagingContentInput {
  shipmentItemId: Long
  pkgId: Long
  quantity: BigDecimal
}

type Payment {
  id: ID
  paymentMethod: String
  orderId: Long
  amount: BigDecimal
  authCode: String
  transactionId: String
  cardNumber: String
  createdDate: String
  orderReference: String
  account: String
  bankAccountNumber: String
  bankName: String
  bankOwnerName: String
  settlementDate: Date
  processedDate: Date
  customer: String
  cartId: String
}

input PaymentInput {
  price: PriceInput
  invoiceNum: String
  userId: Long
}

type PaymentResponse {
  items: [Payment!]!
  total: Int!
  hasMore: Boolean!
}

type Pkg {
  id: ID
  length: BigDecimal
  width: BigDecimal
  height: BigDecimal
  weight: BigDecimal
  packageType: PackageType
  shipmentItems: [ShipmentItem]
}

type PrepQueue {
  id: ID
  description: String
  quantity: BigDecimal
  unpacked: BigDecimal
  image: String
  shipmentId: Long
  productId: Long
  orderItemId: Long
  orderId: Long
}

type PresignedUrl {
  uploadUrl: String
  imageUrl: String
  status: String
}

input PriceInput {
  amount: BigDecimal
  currency: String
}

type PricingRequest {
  id: ID
  sku: String
  ref: String
  email: String
  parent: String
  merchantId: Int
  merchantName: String
  createdDate: String
}

type Product {
  id: ID!
  ref: Long
  parent: Int
  sku: String
  upc: String

  """price: Price"""
  image: String
  gallery: [Gallery]
  releaseDate: LocalDate
  active: Boolean
  similarProducts: [Int]
  url: String
  title: String
  brand: String
  group: ProductGroup
  condition: Condition
  isUsed: Boolean
  availableForOrder: Boolean
  weight: Float
  volumeWeight: Float
  variationDimensions: [String]
  variationOptions: [VariationOption]
  variationAttributes: [Attribute]
  variations: [Variation]
  price: String
  salePrice: String
  discountInPercent: Float
  slug: String
  categories: [Category]
  type: ProductType
  author: String
  unit: String
  description: String
  meta: Meta
  merchantStock: [MerchantStock]
  hours: Int
  availability: String
  features: [String]
  browseNode: String
  inStock: Boolean
  hashtags: [String]
  dial: String
}

enum ProductGroup {
  BAGS
  ART
  BEAUTY
  BEDDINGS
  BOOKS
  CAMERA
  AUTO
  FASHION
  ELECTRONICS
  HEALTH
  MUSIC
  PC
  SPORTS
  TOOLS
  TOYS
  WATCHES
}

type ProductI18n {
  title: String
  description: String
  model: String
  features: [String]
}

input ProductI18nInput {
  title: String
  description: String
  model: String
  features: [String]
  lang: String
}

input ProductInput {
  sku: String
  upc: String
  price: BigDecimal
  salePrice: BigDecimal

  """currency: String,"""
  image: String

  """
  images: [String],
  releaseDate: LocalDate,
  active: Boolean,
  similarProducts: [Int],
  """
  url: String
  name: String
  brand: String
  group: String
  features: String
  name_ar: String
  brand_ar: String
  group_ar: String
  features_ar: String

  """
  condition: Condition,
  isUsed: Boolean,
  availableForOrder: Boolean,
  """
  cost: BigDecimal
  weight: Float
  availability: Int
  quantity: Int
}

type ProductResponse {
  items: [Product!]!
  total: Int!
  hasMore: Boolean!
}

enum ProductType {
  CHILDREN_BOOKS
  TEEN_BOOKS
  ADULT_BOOKS
}

type Purchase {
  id: ID
  purchaseItems: [PurchaseItem]
  currency: String
  invoiceDate: LocalDate
  subtotal: BigDecimal
  deliveryTotal: BigDecimal
  taxesTotal: BigDecimal
  discountTotal: BigDecimal
  total: BigDecimal
  merchantObj: Merchant
}

input PurchaseInput {
  id: ID
  currency: String
  subtotal: Float
  deliveryTotal: Float
  taxesTotal: Float
  discountTotal: Float
  total: Float
  deliveryAddressId: Int
  invoiceAddressId: Int
  merchantId: Int
  orderState: OrderState
  ref: String
}

type PurchaseItem {
  id: ID
  sequence: Int
  price: BigDecimal
  quantity: BigDecimal
  description: String
  orderItems: [OrderItem]
  productId: Long
}

input PurchaseItemInput {
  id: Long
  sequence: Int
  price: Float
  quantity: Float
  description: String
  orderItems: [OrderItemInput]
  productId: Long
}

type PurchaseQueue {
  id: ID
  productName: String
  quantity: BigDecimal
  price: BigDecimal
  cost: BigDecimal
  image: String
  weight: BigDecimal
  url: String
  sku: String
  productId: Long
  orderId: Long
  attributes: String
}

type PurchaseResponse {
  items: [Purchase!]!
  total: Int!
  hasMore: Boolean!
}

type PurchaseShipment {
  shipmentItemId: Int
  purchaseItemId: Int
  purchaseId: Int
  quantity: BigDecimal
}

input PurchaseShipmentInput {
  shipmentItemId: Int
  purchaseItemId: Int
  quantity: BigDecimal
  purchaseId: Long
}

type Query {
  categories(type: String!): [Category!]!
  category(id: Int!): Category!
  customers: [Customer]
  ebay(id: String): Product
  getAddresses(customerId: Int): [Address]
  getCart(secureKey: String, items: [CartItemInput]): Cart
  getProductByDial(dial: String): Product
  getProductBySku(sku: String, isParent: Boolean = false): Product
  hashtags(offset: Int = 0, limit: Int = 10): HashtagResponse
  hashtagsWithProducts(offset: Int = 0, limit: Int = 10): HashtagResponse

  """shipmentItems(shipmentId: Long, isPackaged: boolean): [ShipmentItem]"""
  inventory: [Inventory]

  """getAddress(addressId: Int): Address"""
  me: Customer
  meTest(id: Long): Customer
  merchantProducts(text: String = "", type: String = "", offset: Int = 0, limit: Int = 10, lang: Int = 1, imported: Boolean = true): MerchantProductResponse
  merchants: [Merchant]
  mws(sku: String): Product
  orderA(id: ID): Order

  """getOrders(): [Orders]"""
  orderConfirmation(ref: String, key: String): Order
  orders(limit: Int = 10): [Order]
  ordersA(state: [OrderState], offset: Int, limit: Int, searchText: String): OrderResponse
  outstandingQueue(keyword: String): [OutstandingQueue]
  parentOf(sku: String): String
  pas(sku: String): Product
  payments(orderId: ID): [Payment]
  prepQueue(shipmentId: Long, keyword: String = ""): [PrepQueue]
  pricingRequests: [PricingRequest]
  product(slug: String!, cookie: String = ""): Product!
  productAdmin(id: ID): Product
  productAny(id: ID): Product
  products(category: String, text: String, type: String, offset: Int = 0, limit: Int = 10, lang: String): ProductResponse!
  purchase(id: ID): Purchase
  purchaseQueue: [PurchaseQueue]
  purchases(state: [OrderState], offset: Int, limit: Int, searchText: String): PurchaseResponse
  relatedProducts(type: String, slug: String!): [Product!]!
  relatedTo(ref: Long, hashtags: [String], title: String): HashtagResponse
  rewards: [Reward]
  shipQueue: [ShipQueue]
  shipQueueByCustomerId(customerId: Long): [ShipQueue]
  shipment(id: ID): Shipment
  shipmentItemsByTrackingNums(trackingNums: [String], showClosed: Boolean): [ShipmentItem]
  shipmentItemsCountByTrackingNums(trackingNums: [String]): [ShipmentItemSummary]
  shipmentList(viewName: ShipmentListView): [ShipmentList]
  shipments(status: [ShipmentStatus], type: ShipmentType): [Shipment]
  shipmentsByRef(ref: String): [Shipment]
  sortQueue(keyword: String): [SortQueue]
  track(ref: String): [ShipmentTrackingMap]
  trackingEvents: [TrackingEvent]
  transaction(id: ID): Payment
  transactions(paymentMethods: [String], offset: Int, limit: Int, maxAmount: String, from: Date, to: Date, customerId: Long, accountCode: String, unsettledOnly: Boolean): PaymentResponse
  unshippedPurchases: [PurchaseQueue]
  unshippedQueue: [UnshippedQueue]
}

type Reward {
  id: ID
  name: String
  description: String
  minimumCartAmount: Long
  discountValue: Long
  discountValidDays: Long
  points: Long
}

type Shipment {
  id: ID
  estimatedShipDate: LocalDate
  estimatedReadyDate: LocalDate
  estimatedArrivalDate: LocalDate
  estimatedShipCost: BigDecimal
  actualShipCost: BigDecimal
  latestCancelDate: LocalDate
  handlingInstructions: String
  reference: String
  trackingNum: String
  trackingLink: String
  shipmentMethod: String
  shipmentType: ShipmentType
  shipmentStatus: ShipmentStatus

  """shipmentItems: [ShipmentItem]"""
  customerId: Long
  merchantId: Long
  pkgs: [Pkg]
  shipmentItems: [ShipmentItem]
  customerFirstName: String
  customerLastName: String
  merchantName: String
}

type ShipmentDoc {
  id: ID
  fileKey: String
}

input ShipmentInput {
  reference: String
  trackingNum: String
  shipmentMethod: String
  shipmentType: ShipmentType
  shipmentStatus: ShipmentStatus
  merchantId: Long
  pkgCount: Int
  handlingInstructions: String
}

type ShipmentItem {
  id: ID
  sequence: Int
  quantity: BigDecimal
  description: String
  shipmentId: Long
  productId: Long
  image: String
  purchaseShipments: [PurchaseShipment]
  from: Long
  price: BigDecimal
}

input ShipmentItemInput {
  sequence: Int
  quantity: BigDecimal
  description: String
  shipmentId: Long
  productId: Long
  image: String
  purchaseShipments: [PurchaseShipmentInput]
  from: Long
  price: BigDecimal
}

type ShipmentItemSummary {
  id: Int
  trackingNum: String
  total: Long
  status: String
  processed: Long
  reference: String
}

type ShipmentList {
  id: Long
  createdDate: String
  shipmentMethod: String
  trackingNum: String
  pkgCount: Int
  arrivedPkgs: Int
  status: String
  sender: String
}

enum ShipmentListView {
  INCOMING
  ALL_PURCHASE
  UNCLOSED_TRANSIT
  CANCELLED_TRANSIT
  ALL_TRANSIT
  CUSTOMER_SCHEDULED
  CUSTOMER_FAILED
}

enum ShipmentStatus {
  PENDING
  IN_TRANSIT
  RECEIVED
  DELIVERED
  CANCELED
  FAILED
  PROCESSING
  ACCEPTED
  SCHEDULED
  CLOSED
  ARRIVED
}

type ShipmentTracking {
  content: [Item]
  progress: [TrackingEventItem]
  docs: [ShipmentDoc]
  status: String
  type: String
  date: String
  trackingNum: String
  carrier: String
}

type ShipmentTrackingMap {
  id: Long
  shipment: ShipmentTracking
}

enum ShipmentType {
  PURCHASE
  CUSTOMER
  TRANSFER
  PURCHASERETURN
  CUSTOMERRETURN
  TRANSIT
}

type ShipQueue {
  id: Long
  fullName: String
  reference: String
  total: BigDecimal
  done: BigDecimal
  todo: BigDecimal
  carrier: String
}

type SortQueue {
  id: ID
  description: String
  quantity: BigDecimal
  preallocated: BigDecimal
  price: BigDecimal
  cost: BigDecimal
  weight: BigDecimal
  image: String
  url: String
  sku: String
  shippingInstructions: String
  orderId: Long
  orderItemId: Long
  merchantId: Long
  productId: Long
}

type TrackingEvent {
  id: Long
  name: String
}

type TrackingEventItem {
  status: String
  shipmentEventId: Int
  shipmentEventDescription: String
  createdDate: String
  details: String
  eventDate: LocalDateTime
}

type UnshippedQueue {
  id: ID
  description: String
  quantity: BigDecimal
  date: String
  price: BigDecimal
  weight: BigDecimal
  image: String
  sku: String
  po: Long
}

type Variation {
  ref: ID!
  variationAttributes: [Attribute]
}

type VariationOption {
  label: String
  name: String
  values: [String]
}
